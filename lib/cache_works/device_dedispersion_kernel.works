#ifndef DEDISPERSE_KERNEL_H_
#define DEDISPERSE_KERNEL_H_

#define ARRAYSIZE SDIVINT * SDIVINDM

// Stores temporary shift values
__device__ __constant__ float dm_shifts[15500];
__device__ __constant__ int   i_nsamp, i_nchans, i_t_processed_s;
__device__ __shared__ float2 fa_line[ARRAYSIZE+1];
__device__ __shared__ float2 fb_line[ARRAYSIZE+1];
__device__ __shared__ float2 fc_line[ARRAYSIZE+1];
__device__ __shared__ float2 fd_line[ARRAYSIZE+1];

//{{{ shared_dedisperse_loop

__global__ void shared_dedisperse_kernel(unsigned char *d_input, float *d_output, cudaTextureObject_t tex, float mstartdm, float mdmstep)
{
	// NOTE: inshift AND outshift are set to 0 (zero) in the kernel call and so is
	// removed from this kernel.
	
	int   shift;	
	float local_kernel_t[SNUMREG];

	long long int stage;

	int t  = blockIdx.x * SNUMREG * SDIVINT  + threadIdx.x;
	
	// Initialise the time accumulators
	for(int i = 0; i < SNUMREG; i++) local_kernel_t[i] = 0.0f;

	float shift_temp = mstartdm + ((blockIdx.y * SDIVINDM + threadIdx.y) * mdmstep);
	
	// Loop over the frequency channels.
        for(int c = 0; c < i_nchans; c++) {


		// Calculate the initial shift for this given frequency
		// channel (c) at the current despersion measure (dm) 
		// ** dm is constant for this thread!!**
		shift = (c * (i_nsamp) + t) + __float2int_rz (dm_shifts[c] * shift_temp);
		
		#pragma unroll
		for(int i = 0; i < SNUMREG; i++) {
#ifdef SM_35
			local_kernel_t[i] += (float)__ldg(&d_input[shift + (i * SDIVINT)]);
#else
			stage = d_input[shift + (i * SDIVINT) ];
			local_kernel_t[i] += (float)d_input[shift + (i * SDIVINT) ];
#endif			
		}
	}

	// Write the accumulators to the output array. 
	#pragma unroll
	for(int i = 0; i < SNUMREG; i++) {
		d_output[((blockIdx.y * SDIVINDM) + threadIdx.y)*(i_t_processed_s) + (i * SDIVINT) + (SNUMREG * SDIVINT * blockIdx.x) + threadIdx.x] = local_kernel_t[i]/i_nchans;
	}
}
#endif

