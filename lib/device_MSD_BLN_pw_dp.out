//Added by Karel Adamek

#include "headers/params.h"
#include "device_MSD_BLN_pw_dp_kernel.cu"

int MSD_BLN_pw_dp(float *d_input, float *d_MSD, int nDMs, int nTimesamples, int offset, float bln_sigma_constant){
	//---------> Specific nVidia stuff
	cudaDeviceSetCacheConfig(cudaFuncCachePreferShared);
	cudaDeviceSetSharedMemConfig(cudaSharedMemBankSizeFourByte);
	
	printf("\n----------------->\n");
	
	//---------> Task specific
	ushort nBlocks_x, nBlocks_y;
	int	nBlocks_total, nSteps_x, nSteps_y, nRest;
	float *d_output;
	
	nBlocks_x=0; nRest=0;
	nSteps_x=MSD_BLN_PW_NTHREADS;
	nBlocks_x = nBlocks_x + (nTimesamples-offset)/(nSteps_x);
	nRest=nTimesamples - offset - nBlocks_x*nSteps_x;
	if(nRest>32) nBlocks_x++;
	printf("nSteps_x:%d;b nBlocks_x:%d; nRest:%d; \n", nSteps_x, nBlocks_x, nRest);
	
	nSteps_y = Choose_divider(nDMs,64);
	nBlocks_y=nDMs/nSteps_y;
	printf("nSteps_y:%d; nBlocks_y:%d; nRest:%d; \n", nSteps_y, nBlocks_y, 0);
	
	nBlocks_total=nBlocks_x*nBlocks_y;

	dim3 gridSize(nBlocks_x, nBlocks_y, 1);
	dim3 blockSize(MSD_BLN_PW_NTHREADS, 1, 1);
	
	int nThreads=2048;
	int itemp=0;
	while(itemp==0 && nThreads>32){
		nThreads=(nThreads>>1);
		itemp=(int) (nBlocks_total/(nThreads*32));
	}
	if(nThreads<32) nThreads=32;
	
	dim3 final_gridSize(1, 1, 1);
	dim3 final_blockSize(nThreads, 1, 1);
	
	//---------> Allocation of temporary memory
	cudaMalloc((void **) &d_output, nBlocks_total*3*sizeof(float));
	
	MSD_BLN_pw_dp_kernel<<<final_gridSize, final_blockSize>>>(d_input, d_output, d_MSD, nBlocks_x, nBlocks_y, nTimesamples, nDMs, offset, bln_sigma_constant);
	
	cudaFree(d_output);
	//-------------------------------
	
	printf("-----------------<\n");
	
	return(0);
}
